#!/usr/bin/env bash

# remove title bar text completely
DISABLE_AUTO_TITLE="true"
printf "\033]0; \007"

# Paths
export PATH="$HOME/.composer/vendor/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.symfony/bin:$PATH"
export PATH="$HOME/.yarn/bin:$PATH"
export PATH="$HOME/.config/yarn/global/node_modules/.bin:$PATH"
export PATH="$HOME/.dotfiles/bin:$PATH"
export PATH="/Users/Shared/DBngin/mysql/5.7.23/bin:$PATH"
export PATH="/Users/Shared/DBngin/redis/7.0.0/bin:$PATH"

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

if [[ $(uname -m) == 'arm64' ]]; then
  # If you need to have openjdk first in your PATH
  export PATH="$(brew --prefix openjdk)/bin:$PATH"
  # For compilers to find openjdk you may need to set
  export CPPFLAGS="-I$(brew --prefix openjdk)/include"
fi

# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# refer to ./themes/custom.zsh-theme
ZSH_THEME="custom"

# My custom hook for setting up theme everywhere
export SET_THEME="dracula"

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

export NVM_DIR="$HOME/.nvm"
[ -s "$(brew --prefix nvm)/nvm.sh" ] && . "$(brew --prefix nvm)/nvm.sh"                                       # This loads nvm
[ -s "$(brew --prefix nvm)/etc/bash_completion.d/nvm" ] && . "$(brew --prefix nvm)/etc/bash_completion.d/nvm" # This loads nvm bash_completion

[ -f ~/.aliases ] && source ~/.aliases
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# -------- For Office specific settings -------- #
local FILE=~/.org_zshrc

if [[ -f "$FILE" ]]; then
  source $FILE
fi
# -------- For Office specific settings end -------- #

# -------- VI MODE on terminal -------- #
# Basic auto/tab complete:
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots) # Include hidden files.
bindkey -v
export KEYTIMEOUT=1

# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
# bindkey -v '^?' backward-delete-char

# Change cursor shape for different vi modes.
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
    [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
    [[ ${KEYMAP} == viins ]] ||
    [[ ${KEYMAP} = '' ]] ||
    [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}

zle -N zle-keymap-select

zle-line-init() {
  zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
  echo -ne "\e[5 q"
}

zle -N zle-line-init
echo -ne '\e[5 q'                # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q'; } # Use beam shape cursor for each new prompt.

# Edit line in vim with ctrl-e:
autoload edit-command-line
zle -N edit-command-line
bindkey '^e' edit-command-line
# -------- VI MODE on terminal end -------- #

# -------- zsh-syntax-highlighting -------- #
# for apple silicon machines
if [[ $(uname -m) == 'arm64' ]]; then
  source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
else
  # for intel machines
  source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi
# -------- zsh highlighting end -------- #

# -------- tmux session config -------- #
# Ensure attached to session when opening new terminal windows of kitty
# if ([ -z "$TMUX" ] && echo "$TERM" | grep -q "kitty"); then
#   tmux ls && read tmux_session && tmux attach -t ${tmux_session:-main} || tmux new -s ${tmux_session:-main}
# fi
# -------- tmux session config end -------- #
